{"ast":null,"code":"var _jsxFileName = \"/home/xmh/Projects/Xpaste/client/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n//\n// import io, { Socket } from 'socket.io-client';\n//\n// const socket: Socket = io('http://localhost:3001');\n//\n// const App: React.FC = () => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState<string[]>([]); // Explicitly typing the state\n//\n//     useEffect(() => {\n//         socket.on('message', (msg: string) => {\n//             setMessages(prevMessages => [...prevMessages, msg]);\n//         });\n//\n//         // Clean up the effect\n//         return () => {\n//             socket.off('message');\n//         };\n//     }, []);\n//\n//     const sendMessage = () => {\n//         socket.emit('sendMessage', message);\n//         setMessage('');\n//     };\n//\n//     return (\n//         <div>\n//             <input\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//                 type=\"text\"\n//                 placeholder=\"Type a message...\"\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//             <div>\n//                 {messages.map((msg, index) => (\n//                     <p key={index}>{msg}</p>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default App;\n\n// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n// Establish connection to the WebSocket server\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst App = () => {\n  _s();\n  const [message, setMessage] = useState(''); // State for the current input message\n  const [messages, setMessages] = useState([]); // State for storing all messages\n\n  // useEffect(() => {\n  //     // Listen for 'messageReceived' events from the server\n  //     socket.on('messageReceived', (msg) => {\n  //         setMessages((prevMessages) => [...prevMessages, msg]);\n  //     });\n  //\n  //     // Cleanup function to remove the event listener\n  //     return () => {\n  //         socket.off('messageReceived');\n  //     };\n  // }, []);\n\n  useEffect(() => {\n    socket.on('message', msg => {\n      setMessages(prevMessages => [...prevMessages, msg]);\n    });\n\n    // Clean up the effect\n    return () => {\n      socket.off('message');\n    };\n  }, []);\n  const sendMessage = () => {\n    if (message.trim()) {\n      socket.emit('sendMessage', message); // Emit 'sendMessage' event to the server\n      setMessage(''); // Clear the input after sending\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type your message here...\",\n      onKeyPress: e => e.key === 'Enter' ? sendMessage() : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this) // Display each message\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"WDgp24k/FdZO6Mwa4GS0i45C6ek=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","App","_s","message","setMessage","messages","setMessages","on","msg","prevMessages","off","sendMessage","trim","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onKeyPress","key","onClick","map","index","_c","$RefreshReg$"],"sources":["/home/xmh/Projects/Xpaste/client/src/App.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n//\n// import io, { Socket } from 'socket.io-client';\n//\n// const socket: Socket = io('http://localhost:3001');\n//\n// const App: React.FC = () => {\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState<string[]>([]); // Explicitly typing the state\n//\n//     useEffect(() => {\n//         socket.on('message', (msg: string) => {\n//             setMessages(prevMessages => [...prevMessages, msg]);\n//         });\n//\n//         // Clean up the effect\n//         return () => {\n//             socket.off('message');\n//         };\n//     }, []);\n//\n//     const sendMessage = () => {\n//         socket.emit('sendMessage', message);\n//         setMessage('');\n//     };\n//\n//     return (\n//         <div>\n//             <input\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//                 type=\"text\"\n//                 placeholder=\"Type a message...\"\n//             />\n//             <button onClick={sendMessage}>Send</button>\n//             <div>\n//                 {messages.map((msg, index) => (\n//                     <p key={index}>{msg}</p>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n//\n// export default App;\n\n\n\n// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n// Establish connection to the WebSocket server\nconst socket = io('http://localhost:3001');\n\nconst App = () => {\n    const [message, setMessage] = useState(''); // State for the current input message\n    const [messages, setMessages] = useState([]); // State for storing all messages\n\n    // useEffect(() => {\n    //     // Listen for 'messageReceived' events from the server\n    //     socket.on('messageReceived', (msg) => {\n    //         setMessages((prevMessages) => [...prevMessages, msg]);\n    //     });\n    //\n    //     // Cleanup function to remove the event listener\n    //     return () => {\n    //         socket.off('messageReceived');\n    //     };\n    // }, []);\n\n    useEffect(() => {\n        socket.on('message', (msg: string) => {\n            setMessages(prevMessages => [...prevMessages, msg]);\n        });\n\n        // Clean up the effect\n        return () => {\n            socket.off('message');\n        };\n    }, []);\n\n    const sendMessage = () => {\n        if (message.trim()) {\n            socket.emit('sendMessage', message); // Emit 'sendMessage' event to the server\n            setMessage(''); // Clear the input after sending\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Real-Time Chat</h1>\n            <input\n                type=\"text\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"Type your message here...\"\n                onKeyPress={(e) => e.key === 'Enter' ? sendMessage() : null}\n            />\n            <button onClick={sendMessage}>Send</button>\n            <div className=\"messages\">\n                {messages.map((msg, index) => (\n                    <p key={index}>{msg}</p> // Display each message\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}